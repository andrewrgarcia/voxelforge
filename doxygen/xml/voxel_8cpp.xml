<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="voxel_8cpp" kind="file" language="C++">
    <compoundname>voxel.cpp</compoundname>
    <includes refid="voxel_8h" local="yes">voxel.h</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">tuple</includes>
    <includes local="no">cmath</includes>
    <incdepgraph>
      <node id="1">
        <label>voxel.cpp</label>
        <link refid="voxel_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>voxel.h</label>
        <link refid="voxel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cmath</label>
      </node>
      <node id="4">
        <label>Eigen/Dense</label>
      </node>
      <node id="5">
        <label>tuple</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
      <node id="6">
        <label>pybind11/pybind11.h</label>
      </node>
      <node id="7">
        <label>unordered_map</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="voxel_8cpp_1a4fa9b1a6b72022d76a223da0ce920d06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; float &gt; &gt; createNodeFeatures</definition>
        <argsstring>(const VoxelGrid &amp;grid)</argsstring>
        <name>createNodeFeatures</name>
        <param>
          <type>const <ref refid="classVoxelGrid" kindref="compound">VoxelGrid</ref> &amp;</type>
          <declname>grid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/andrew/voxelforge/VoxelForge/voxel.cpp" line="44" column="13" bodyfile="/home/andrew/voxelforge/VoxelForge/voxel.cpp" bodystart="44" bodyend="54" declfile="/home/andrew/voxelforge/VoxelForge/voxel.cpp" declline="33" declcolumn="13"/>
        <references refid="classVoxelGrid_1a7fd3f777177eddc937950363aed16c4d" compoundref="voxel_8h" startline="21">VoxelGrid::voxels</references>
        <referencedby refid="classVoxelGrid_1af2c979ef9e6b5058de86b7395a3dc1b7" compoundref="voxel_8cpp" startline="38" endline="42">VoxelGrid::toGraph</referencedby>
      </memberdef>
      <memberdef kind="function" id="voxel_8cpp_1a03c7ff708a72e2a3e2100ef4a87ddab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; int, int &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; int, int &gt; &gt; createEdgeIndex</definition>
        <argsstring>(const VoxelGrid &amp;grid, float neighboring_radius)</argsstring>
        <name>createEdgeIndex</name>
        <param>
          <type>const <ref refid="classVoxelGrid" kindref="compound">VoxelGrid</ref> &amp;</type>
          <declname>grid</declname>
        </param>
        <param>
          <type>float</type>
          <declname>neighboring_radius</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/andrew/voxelforge/VoxelForge/voxel.cpp" line="56" column="13" bodyfile="/home/andrew/voxelforge/VoxelForge/voxel.cpp" bodystart="56" bodyend="70" declfile="/home/andrew/voxelforge/VoxelForge/voxel.cpp" declline="34" declcolumn="13"/>
        <references refid="voxel_8cpp_1a87852c588d25ed4b01291195a4032937" compoundref="voxel_8cpp" startline="72" endline="78">calculateDistance</references>
        <references refid="classVoxelGrid_1a7fd3f777177eddc937950363aed16c4d" compoundref="voxel_8h" startline="21">VoxelGrid::voxels</references>
        <referencedby refid="classVoxelGrid_1af2c979ef9e6b5058de86b7395a3dc1b7" compoundref="voxel_8cpp" startline="38" endline="42">VoxelGrid::toGraph</referencedby>
      </memberdef>
      <memberdef kind="function" id="voxel_8cpp_1a87852c588d25ed4b01291195a4032937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float calculateDistance</definition>
        <argsstring>(const Voxel &amp;v1, const Voxel &amp;v2)</argsstring>
        <name>calculateDistance</name>
        <param>
          <type>const <ref refid="classVoxel" kindref="compound">Voxel</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classVoxel" kindref="compound">Voxel</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/andrew/voxelforge/VoxelForge/voxel.cpp" line="72" column="7" bodyfile="/home/andrew/voxelforge/VoxelForge/voxel.cpp" bodystart="72" bodyend="78" declfile="/home/andrew/voxelforge/VoxelForge/voxel.cpp" declline="35" declcolumn="7"/>
        <references refid="classVoxel_1a674294363564721716c6f0aa4f215ede" compoundref="voxel_8h" startline="10">Voxel::x</references>
        <references refid="classVoxel_1a3cbecb90fc3ff99be1b6f1598ae9aa13" compoundref="voxel_8h" startline="10">Voxel::y</references>
        <references refid="classVoxel_1ad594fe5ff5daf488c7d178d0017f480e" compoundref="voxel_8h" startline="10">Voxel::z</references>
        <referencedby refid="voxel_8cpp_1a03c7ff708a72e2a3e2100ef4a87ddab2" compoundref="voxel_8cpp" startline="56" endline="70">createEdgeIndex</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="voxel_8h" kindref="compound">voxel.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="classVoxel_1a3ec9ead5df15b2735e62765531485250" refkind="member"><highlight class="normal"><ref refid="classVoxel_1a3ec9ead5df15b2735e62765531485250" kindref="member">Voxel::Voxel</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z,<sp/>pybind11::object<sp/>data)<sp/>:<sp/>x(x),<sp/>y(y),<sp/>z(z),<sp/>data(data)<sp/>{}</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="classVoxel_1a9614452c6bdb92f30c9c07a0e2c543ec" refkind="member"><highlight class="normal">pybind11::object<sp/><ref refid="classVoxel_1a9614452c6bdb92f30c9c07a0e2c543ec" kindref="member">Voxel::getData</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classVoxel_1af8b08008011165d8769d73d1949c2e67" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="10"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="classVoxel_1aadc8381c79044a5f56828802dd00563b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVoxel_1aadc8381c79044a5f56828802dd00563b" kindref="member">Voxel::setData</ref>(pybind11::object<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVoxel_1af8b08008011165d8769d73d1949c2e67" kindref="member">data</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><ref refid="classVoxelGrid_1a7c8c91595d2c009db8f67557bb87c2aa" kindref="member">VoxelGrid::VoxelGrid</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="classVoxelGrid_1a54bf370516edaea473f3c11a69cfbc39" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVoxelGrid_1a54bf370516edaea473f3c11a69cfbc39" kindref="member">VoxelGrid::addVoxel</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z,<sp/>pybind11::object<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVoxelGrid_1a7fd3f777177eddc937950363aed16c4d" kindref="member">voxels</ref>.emplace_back(x,<sp/>y,<sp/>z,<sp/>data);</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="classVoxelGrid_1ae681fbc351f63d6389275d3f79330bca" refkind="member"><highlight class="normal">std::vector&lt;std::tuple&lt;int,<sp/>int,<sp/>int&gt;&gt;<sp/><ref refid="classVoxelGrid_1ae681fbc351f63d6389275d3f79330bca" kindref="member">VoxelGrid::toList</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::tuple&lt;int,<sp/>int,<sp/>int&gt;&gt;<sp/>voxel_list;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>voxel<sp/>:<sp/><ref refid="classVoxelGrid_1a7fd3f777177eddc937950363aed16c4d" kindref="member">voxels</ref>)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>voxel_list.emplace_back(voxel.x,<sp/>voxel.y,<sp/>voxel.z);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>voxel_list;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Declare<sp/>because<sp/>being<sp/>called<sp/>prior<sp/>tu<sp/>function<sp/>def<sp/>for<sp/>clean<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;&gt;<sp/><ref refid="voxel_8cpp_1a4fa9b1a6b72022d76a223da0ce920d06" kindref="member">createNodeFeatures</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVoxelGrid" kindref="compound">VoxelGrid</ref>&amp;<sp/>grid);</highlight></codeline>
<codeline lineno="34"><highlight class="normal">std::vector&lt;std::pair&lt;int,<sp/>int&gt;&gt;<sp/><ref refid="voxel_8cpp_1a03c7ff708a72e2a3e2100ef4a87ddab2" kindref="member">createEdgeIndex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVoxelGrid" kindref="compound">VoxelGrid</ref>&amp;<sp/>grid,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>neighboring_radius);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="voxel_8cpp_1a87852c588d25ed4b01291195a4032937" kindref="member">calculateDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVoxel" kindref="compound">Voxel</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVoxel" kindref="compound">Voxel</ref>&amp;<sp/>v2);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">std::pair&lt;std::vector&lt;std::vector&lt;float&gt;&gt;,<sp/>std::vector&lt;std::pair&lt;int,<sp/>int&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="38" refid="classVoxelGrid_1af2c979ef9e6b5058de86b7395a3dc1b7" refkind="member"><highlight class="normal"><ref refid="classVoxelGrid_1af2c979ef9e6b5058de86b7395a3dc1b7" kindref="member">VoxelGrid::toGraph</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xDim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yDim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zDim,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>neighboring_radius)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>node_features<sp/>=<sp/><ref refid="voxel_8cpp_1a4fa9b1a6b72022d76a223da0ce920d06" kindref="member">createNodeFeatures</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>edge_index<sp/>=<sp/><ref refid="voxel_8cpp_1a03c7ff708a72e2a3e2100ef4a87ddab2" kindref="member">createEdgeIndex</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>neighboring_radius);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(node_features,<sp/>edge_index);</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="voxel_8cpp_1a4fa9b1a6b72022d76a223da0ce920d06" refkind="member"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;&gt;<sp/><ref refid="voxel_8cpp_1a4fa9b1a6b72022d76a223da0ce920d06" kindref="member">createNodeFeatures</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVoxelGrid" kindref="compound">VoxelGrid</ref>&amp;<sp/>grid)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;float&gt;&gt;<sp/>node_features;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>voxel<sp/>:<sp/>grid.<ref refid="classVoxelGrid_1a7fd3f777177eddc937950363aed16c4d" kindref="member">voxels</ref>)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_features.push_back({</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(voxel.x),</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(voxel.y),</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(voxel.z)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node_features;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="voxel_8cpp_1a03c7ff708a72e2a3e2100ef4a87ddab2" refkind="member"><highlight class="normal">std::vector&lt;std::pair&lt;int,<sp/>int&gt;&gt;<sp/><ref refid="voxel_8cpp_1a03c7ff708a72e2a3e2100ef4a87ddab2" kindref="member">createEdgeIndex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVoxelGrid" kindref="compound">VoxelGrid</ref>&amp;<sp/>grid,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>neighboring_radius)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;int,<sp/>int&gt;&gt;<sp/>edges;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>grid.<ref refid="classVoxelGrid_1a7fd3f777177eddc937950363aed16c4d" kindref="member">voxels</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>voxel<sp/>=<sp/>grid.<ref refid="classVoxelGrid_1a7fd3f777177eddc937950363aed16c4d" kindref="member">voxels</ref>[i];</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>grid.<ref refid="classVoxelGrid_1a7fd3f777177eddc937950363aed16c4d" kindref="member">voxels</ref>.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>j)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>self-connection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>neighbor<sp/>=<sp/>grid.<ref refid="classVoxelGrid_1a7fd3f777177eddc937950363aed16c4d" kindref="member">voxels</ref>[j];</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/><ref refid="voxel_8cpp_1a87852c588d25ed4b01291195a4032937" kindref="member">calculateDistance</ref>(voxel,<sp/>neighbor);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance<sp/>&lt;=<sp/>neighboring_radius)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edges.emplace_back(i,<sp/>j);<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>edge<sp/>from<sp/>voxel<sp/>i<sp/>to<sp/>voxel<sp/>j</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>edges;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="voxel_8cpp_1a87852c588d25ed4b01291195a4032937" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="voxel_8cpp_1a87852c588d25ed4b01291195a4032937" kindref="member">calculateDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVoxel" kindref="compound">Voxel</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVoxel" kindref="compound">Voxel</ref>&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pow(v1.<ref refid="classVoxel_1a674294363564721716c6f0aa4f215ede" kindref="member">x</ref><sp/>-<sp/>v2.<ref refid="classVoxel_1a674294363564721716c6f0aa4f215ede" kindref="member">x</ref>,<sp/>2)<sp/>+</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pow(v1.<ref refid="classVoxel_1a3cbecb90fc3ff99be1b6f1598ae9aa13" kindref="member">y</ref><sp/>-<sp/>v2.<ref refid="classVoxel_1a3cbecb90fc3ff99be1b6f1598ae9aa13" kindref="member">y</ref>,<sp/>2)<sp/>+</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pow(v1.<ref refid="classVoxel_1ad594fe5ff5daf488c7d178d0017f480e" kindref="member">z</ref><sp/>-<sp/>v2.<ref refid="classVoxel_1ad594fe5ff5daf488c7d178d0017f480e" kindref="member">z</ref>,<sp/>2)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/andrew/voxelforge/VoxelForge/voxel.cpp"/>
  </compounddef>
</doxygen>
